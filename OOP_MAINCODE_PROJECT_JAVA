import java.awt.*;
import java.util.HashMap;
import java.util.Map;
import javax.swing.*;

public class RestaurantGUI {
    private static final Map<String, Customer> registeredCustomers = new HashMap<>();
    private static double totalDonations = 0;
    private static Map<String, Orderable> menu = initializeMenu();
    private static Customer currentCustomer = null;
    private static Order currentOrder = null;

    public static void main(String[] args) {
        SwingUtilities.invokeLater(RestaurantGUI::createMainFrame);
    }
    
    private static JLabel createStyledLabel(String text, int fontSize, Color color) {
        JLabel label = new JLabel(text);
        label.setFont(new Font("Arial", Font.PLAIN, fontSize));
        label.setForeground(color);
        return label;
    }

    private static void createMainFrame() {
        JFrame frame = new JFrame("Nicole's Restaurant");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(800, 600);
        frame.setLayout(new BorderLayout());
    
        JPanel welcomePanel = new JPanel();
        welcomePanel.setLayout(new GridBagLayout());
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.gridx = 0; 
        gbc.gridy = GridBagConstraints.RELATIVE; 
        gbc.insets = new Insets(10, 10, 10, 10); 
        gbc.anchor = GridBagConstraints.CENTER;
    
        JLabel welcomeLabel = new JLabel("Welcome to Nicole's Restaurant!");
        welcomeLabel.setFont(new Font("Arial", Font.BOLD, 20));
        welcomeLabel.setForeground(new Color(153, 51, 0));
    
        JButton loginButton = new JButton("Log In");
        JButton registerButton = new JButton("Register");
    
        loginButton.setForeground(new Color(153, 51, 0));
        loginButton.setBackground(new Color(255, 204, 153));
    
        registerButton.setForeground(new Color(153, 51, 0));
        registerButton.setBackground(new Color(255, 204, 153));
    
        registerButton.addActionListener(e -> showLoginRegisterPanel(frame, "Register"));
        loginButton.addActionListener(e -> showLoginRegisterPanel(frame, "Log In"));
    
        welcomePanel.add(welcomeLabel, gbc);
        welcomePanel.add(registerButton, gbc);
        welcomePanel.add(loginButton, gbc);
    
        frame.add(welcomePanel, BorderLayout.CENTER);
        frame.setVisible(true);
    }
    
    private static void showLoginRegisterPanel(JFrame frame, String action) {
        frame.getContentPane().removeAll(); // Clear the frame for new content
        frame.setLayout(new GridBagLayout());
    
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = GridBagConstraints.RELATIVE;
        gbc.insets = new Insets(10, 10, 10, 10);
        gbc.anchor = GridBagConstraints.CENTER;
    
        JLabel titleLabel = new JLabel(action.toUpperCase()); 
        titleLabel.setFont(new Font("Arial", Font.BOLD, 18));
        frame.add(titleLabel, gbc);
    
        JLabel nameLabel = new JLabel("Name:");
        nameLabel.setFont(new Font("Arial", Font.PLAIN, 14));
        JTextField nameField = new JTextField(15);
    
        JLabel addressLabel = new JLabel("Address:");
        addressLabel.setFont(new Font("Arial", Font.PLAIN, 14));
        JTextField addressField = new JTextField(15);
    
        JLabel phoneLabel = new JLabel("Phone:");
        phoneLabel.setFont(new Font("Arial", Font.PLAIN, 14));
        JTextField phoneField = new JTextField(15);
    
        JButton actionButton = new JButton(action.toUpperCase());
        actionButton.setFont(new Font("Arial", Font.PLAIN, 14));
        actionButton.setBackground(new Color(255, 204, 153));
        actionButton.setForeground(new Color(153, 51, 0));
    
        actionButton.addActionListener(e -> {
            String name = nameField.getText().trim();
            String address = addressField.getText().trim();
            String phone = phoneField.getText().trim();

    
            if (action.equals("Register")) {
                if (registeredCustomers.containsKey(name)) {
                    JOptionPane.showMessageDialog(frame, "Customer already registered. Please log in.");
                } else if (name.isEmpty() || address.isEmpty() || phone.isEmpty()) {
                    JOptionPane.showMessageDialog(frame, "Please fill all fields!");
                } else {
                    currentCustomer = new Customer(name, address, phone);
                    registeredCustomers.put(name, currentCustomer);
                    JOptionPane.showMessageDialog(frame, "Registration Successful!");
                    showMenuFrame(null, frame);    
            
                }
            }
            
                else if (action.equals("Log In")) {

                if (registeredCustomers.containsKey(name)) {
                    currentCustomer = registeredCustomers.get(name);
                    JOptionPane.showMessageDialog(frame, "Welcome back, " + currentCustomer.getName() + "!");
                    showMenuFrame(null, frame); // Go to menu directly
                } else {
                    JOptionPane.showMessageDialog(frame, "Customer not found. Please register.");
                }
            }
        });
    
        frame.add(nameLabel, gbc);
        frame.add(nameField, gbc);
        frame.add(addressLabel, gbc);
        frame.add(addressField, gbc);
        frame.add(phoneLabel, gbc);
        frame.add(phoneField, gbc);
        frame.add(actionButton, gbc);
    
        frame.revalidate();
        frame.repaint();
    }    

    private static void showMenuFrame(String generatedReceipt, JFrame frame) {
        frame.getContentPane().removeAll(); // Clear existing content
        frame.setLayout(new BorderLayout());
    
        JLabel menuLabel = new JLabel("MENU", SwingConstants.CENTER);
        menuLabel.setFont(new Font("Arial", Font.BOLD, 36));  
        menuLabel.setForeground(new Color(153, 51, 0)); 
        frame.add(menuLabel, BorderLayout.NORTH);
    
        JPanel menuPanel = new JPanel(new GridLayout(2, 2, 20, 20)); 
        menuPanel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20)); // Add padding to the panel
    
        JPanel mainCoursesPanel = createCategoryPanel("Main Courses", new Class[]{MainCourse.class});
        JPanel appetizersPanel = createCategoryPanel("Appetizers", new Class[]{Appetizer.class});
        JPanel dessertsPanel = createCategoryPanel("Desserts", new Class[]{Dessert.class});
        JPanel drinksPanel = createCategoryPanel("Drinks", new Class[]{Drink.class});
    
        menuPanel.add(mainCoursesPanel); // Left top
        menuPanel.add(appetizersPanel);  // Right top
        menuPanel.add(dessertsPanel);    // Left bottom
        menuPanel.add(drinksPanel);      // Right bottom
    
        frame.add(menuPanel, BorderLayout.CENTER);
    
        JButton placeOrderButton = new JButton("Place Order");
        JButton backButton = new JButton("Back");
    
        placeOrderButton.addActionListener(e -> {
            if (currentOrder == null || currentOrder.getItems().isEmpty()) {
                JOptionPane.showMessageDialog(frame, "No items in the cart.");
            } else {
                showOrderSummary(frame); // Show order summary and donation option
            }
    });
    
        backButton.addActionListener(e -> createMainFrame()); 
    
        JPanel buttonPanel = new JPanel();
        buttonPanel.add(placeOrderButton);
        buttonPanel.add(backButton);
    
        frame.add(buttonPanel, BorderLayout.SOUTH);
        frame.revalidate();
        frame.repaint();
    }
    
    private static void showOrderSummary(JFrame frame) {
        double orderTotal = currentOrder.calculateTotal();
        
        // Display the order total and ask for donation
        int choice = JOptionPane.showConfirmDialog(frame, 
            "Your total order is PHP " + String.format("%.2f", orderTotal) + 
            ".\nWould you like to donate to support food programs?", 
            "Donation", JOptionPane.YES_NO_OPTION);
        
        double donationAmount = 0;
        if (choice == JOptionPane.YES_OPTION) {
            String input = JOptionPane.showInputDialog("Enter donation amount:");
            try {
                donationAmount = Double.parseDouble(input);
                if (donationAmount < 0) {
                    JOptionPane.showMessageDialog(frame, "Donation amount cannot be negative.");
                    donationAmount = 0;
                }
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(frame, "Invalid donation amount. Proceeding without donation.");
            }
        }
        
        totalDonations += donationAmount;
        
        // Display the receipt
        String receipt = currentOrder.displayReceipt(donationAmount, currentCustomer, totalDonations);
        showReceipt(receipt, frame);
    }    
    
    private static JPanel createCategoryPanel(String categoryName, Class<?>[] itemClasses) {
        JPanel categoryPanel = new JPanel(new GridLayout(0, 1)); // Each item is stacked vertically
        categoryPanel.setBorder(BorderFactory.createTitledBorder(categoryName)); 

        for (Map.Entry<String, Orderable> entry : menu.entrySet()) {
            Orderable item = entry.getValue();
            if (itemClasses[0].isAssignableFrom(item.getClass())) {

                String itemName = item.getItemName();
                String price = "PHP " + item.getPrice();
                JPanel itemPanel = new JPanel(new FlowLayout(FlowLayout.LEFT)); // Align items to the left
                JLabel itemLabel = new JLabel(itemName + " - " + price);
                itemLabel.setFont(new Font("Arial", Font.PLAIN, 14));
                itemPanel.add(itemLabel);
                itemPanel.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));

                itemPanel.addMouseListener(new java.awt.event.MouseAdapter() {
                    @Override
                    public void mouseClicked(java.awt.event.MouseEvent e) {
                        String input = JOptionPane.showInputDialog("Enter Quantity for " + itemName + ":");
                        try {
                            int quantity = Integer.parseInt(input);
                            if (quantity > 0) {
                                if (currentOrder == null) {
                                    currentOrder = new Order(); // Initialize order if null
                                }
                                currentOrder.addItemToCart(item, quantity);
                                JOptionPane.showMessageDialog(null, itemName + " added to cart!");
                            } else {
                                JOptionPane.showMessageDialog(null, "Error. Quantity must be greater than 0.");
                            }
                        } catch (NumberFormatException ex) {
                            JOptionPane.showMessageDialog(null, "Invalid quantity. Please enter a number.");
                        }
                    }
                });
                
                categoryPanel.add(itemPanel);
            }
        }

        return categoryPanel;
    }
    
    private static void showReceipt(String receipt, JFrame frame) {
        // Create a new panel to display the receipt
        JPanel receiptPanel = new JPanel(new BorderLayout());
        
        JTextArea receiptArea = new JTextArea(20, 50);
        receiptArea.setText(receipt);
        receiptArea.setEditable(false); // Make it read-only
        
        JScrollPane scrollPane = new JScrollPane(receiptArea);
        receiptPanel.add(scrollPane, BorderLayout.CENTER);
    
        JPanel buttonPanel = new JPanel();
        JButton backToMenuButton = new JButton("Back to Menu");
        JButton nextButton = new JButton("Next");
    
        backToMenuButton.addActionListener(e -> showMenuFrame(null, frame)); 
    
        nextButton.addActionListener(e -> showThankYouMessage(frame)); 
    
        buttonPanel.add(backToMenuButton);
        buttonPanel.add(nextButton);
    
        receiptPanel.add(buttonPanel, BorderLayout.SOUTH);
    
        frame.getContentPane().removeAll();
        frame.getContentPane().add(receiptPanel);
        frame.revalidate();
        frame.repaint();
    }
    
    private static void showThankYouMessage(JFrame frame) {
        JPanel thankYouPanel = new JPanel(new GridBagLayout()); // Center components
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = GridBagConstraints.RELATIVE;
        gbc.insets = new Insets(10, 10, 10, 10);
        gbc.anchor = GridBagConstraints.CENTER;
    
        // Display thank-you message
        JLabel thankYouMessage = new JLabel("Thank you for dining with us, " + currentCustomer.getName() + "!");
        thankYouMessage.setFont(new Font("Arial", Font.BOLD, 18));
    
        JLabel donationMessage = new JLabel("Your donation helps combat hunger and supports food programs.");
        donationMessage.setFont(new Font("Arial", Font.PLAIN, 16));
    
        JButton nextButton = new JButton("Next");
        nextButton.addActionListener(e -> showLogOutOrOrderAgain(frame));
    
        thankYouPanel.add(thankYouMessage, gbc);
        thankYouPanel.add(donationMessage, gbc);
        thankYouPanel.add(nextButton, gbc);
    
        frame.getContentPane().removeAll();
        frame.getContentPane().add(thankYouPanel);
        frame.revalidate();
        frame.repaint();
    }
    
    private static void showLogOutOrOrderAgain(JFrame frame) {
        JPanel optionPanel = new JPanel(new GridBagLayout());
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = GridBagConstraints.RELATIVE;
        gbc.insets = new Insets(10, 10, 10, 10);
        gbc.anchor = GridBagConstraints.CENTER;
    
        JLabel optionLabel = new JLabel("Do you want to log out or order again?");
        optionLabel.setFont(new Font("Arial", Font.BOLD, 16));
    
        JButton logOutButton = new JButton("Log Out");
        JButton orderAgainButton = new JButton("Order Again");
    
        logOutButton.addActionListener(e -> {
            currentOrder = null;
            currentCustomer = null;
            
            frame.getContentPane().removeAll(); 
            frame.revalidate(); 
            frame.repaint();
            
            createMainFrame(); 
        });                                
    
        orderAgainButton.addActionListener(e -> {
            currentOrder = null;
            showMenuFrame(null, frame);
        });
    
        optionPanel.add(optionLabel, gbc);
        optionPanel.add(logOutButton, gbc);
        optionPanel.add(orderAgainButton, gbc);
    
        frame.getContentPane().removeAll();
        frame.getContentPane().add(optionPanel);
        frame.revalidate();
        frame.repaint();
    }       
    
    private static Map<String, Orderable> initializeMenu() {
        Map<String, Orderable> menu = new HashMap<>();
        
        // Appetizers
        menu.put("Chicken Caesar Salad", new Appetizer("Chicken Caesar Salad", 190));
        menu.put("Carrot Fries", new Appetizer("Carrot Fries", 85));
        menu.put("Onion Rings", new Appetizer("Onion Rings", 65));
        
        // Main Courses
        menu.put("Shrimp in Garlic Butter Aligue Sauce", new MainCourse("Shrimp in Garlic Butter Aligue Sauce", 250));
        menu.put("Cheesy Baked Scallops", new MainCourse("Cheesy Baked Scallops", 285));
        menu.put("Lasagna", new MainCourse("Lasagna", 245));
        menu.put("Baked Salmon with Lemon", new MainCourse("Baked Salmon with Lemon", 465));
        
        // Desserts
        menu.put("Leche Flan", new Dessert("Leche Flan", 100));
        menu.put("Cheesecake (slice)", new Dessert("Cheesecake (slice)", 135));
        menu.put("Cookies", new Dessert("Cookies", 70));

        // Drinks 
        menu.put("Mountain Dew", new Drink("Mountain Dew", 30));
        menu.put("Mineral Water", new Drink("Mineral Water", 30));
        menu.put("Coke Zero in Can", new Drink("Coke Zero in Can", 50));
        menu.put("Coke in Can", new Drink("Coke in Can", 50)); 
        menu.put("Red Iced Tea", new Drink("Red Iced Tea", 65)); 

        return menu;
    }
}

class Customer {
    private String name;
    private String address;
    private String phone;

    public Customer(String name, String address, String phone) {
        this.name = name;
        this.address = address;
        this.phone = phone;
    }

    public String getName() {
        return name;
    }

    public String getAddress() {
        return address;
    }

    public String getPhone() {
        return phone;
    }
}

interface Orderable {
    String getItemName();
    double getPrice();
}

class FoodItem implements Orderable {
    private String itemName;
    private double price;

    public FoodItem(String itemName, double price) {
        this.itemName = itemName;
        this.price = price;
    }

    public String getItemName() {
        return itemName;
    }

    public double getPrice() {
        return price;
    }
}

class MainCourse extends FoodItem {
    public MainCourse(String itemName, double price) {
        super(itemName, price);
    }
}

class Dessert extends FoodItem {
    public Dessert(String itemName, double price) {
        super(itemName, price);
    }
}

class Drink extends FoodItem {
    public Drink(String itemName, double price) {
        super(itemName, price);
    }
}

class Appetizer extends FoodItem {
    public Appetizer(String itemName, double price) {
        super(itemName, price);
    }
}

class Order {
    private Map<Orderable, Integer> items = new HashMap<>();

    // Getter method to access items
    public Map<Orderable, Integer> getItems() {
        return items;
    }

    public void addItemToCart(Orderable item, int quantity) {
        items.put(item, items.getOrDefault(item, 0) + quantity);
    }

    public double calculateTotal() {
        double total = 0;
        for (Map.Entry<Orderable, Integer> entry : items.entrySet()) {
            total += entry.getKey().getPrice() * entry.getValue();
        }
        return total;
    }

    public String displayReceipt(double donations, Customer customer, double totalDonations) {
        StringBuilder receipt = new StringBuilder();
        
        int totalLength = 40;
        String header = "RECEIPT";
        
        int spaces = (totalLength - header.length()) / 2;
        
        String centeredHeader = String.format("%" + (spaces + header.length()) + "s", header);
        
        receipt.append(centeredHeader).append("\n");
    
        // List ordered items with their quantity and price
        for (Map.Entry<Orderable, Integer> entry : items.entrySet()) {
            receipt.append(entry.getKey().getItemName())
                   .append(" x").append(entry.getValue())
                   .append(" - PHP ").append(String.format("%.2f", entry.getKey().getPrice() * entry.getValue()))
                   .append("\n");
        }
    
        double orderTotal = calculateTotal();
        receipt.append("\nTotal (Order): PHP ").append(String.format("%.2f", orderTotal)).append("\n");
    
        if (donations > 0) {
            receipt.append("Total (Donation): PHP ").append(String.format("%.2f", donations)).append("\n");
        }
    
        double grandTotal = orderTotal + donations;
        receipt.append("Grand Total Amount (Order + Donation): PHP ").append(String.format("%.2f", grandTotal)).append("\n");
    
        receipt.append("\nCUSTOMER DETAILS\n");
        receipt.append("Name: ").append(customer.getName()).append("\n");
        receipt.append("Address: ").append(customer.getAddress()).append("\n");
        receipt.append("Phone #: ").append(customer.getPhone()).append("\n");
    
        receipt.append("\nTOTAL DONATIONS\n");
        receipt.append("Total Donations Collected: PHP ").append(String.format("%.2f", totalDonations + donations)).append("\n");
    
        return receipt.toString();
    }
}

